(function() {
    const app = angular.module('filesync.chat', [
        //'filesync.chat.bot',
        'filesync.chat.input',
        'filesync.chat.messages',
        'filesync.chat.viewers',
        'filesync.chat.socket'
    ]);
})();

(function() {
    const app = angular.module('filesync.history', []);
})();

(function() {
    const app = angular.module('filesync.chat.input', [
    ]);
})();

(function() {
    const app = angular.module('filesync.chat.messages', [
    ]);
})();

(function() {
    const app = angular.module('filesync.chat.socket', [
    ]);
})();

(function() {
    const app = angular.module('filesync.chat.viewers', [
    ]);
})();

(function () {
	const app = angular.module('filesync', [
		'ui.router',
		'ngAnimate',
		'hljs',

		'filesync.chat',
		'filesync.history'
	]);

	app.constant('io', io)
		.constant('Visibility', Visibility)
		.constant('_', _);

	app.config(function ($stateProvider, $locationProvider, $urlRouterProvider) {

		$locationProvider.html5Mode(true);

		$stateProvider.state('index', {
			url: '/',
			templateUrl: '/index.html'
		});

		$urlRouterProvider.otherwise('/');
	});

})();

(function () {

	angular.module('filesync')
		.factory('visibilityService', ['Visibility', 'socketService',
            function (Visibility, socketService) {
				Visibility.change(function (evt, state) {
					// state === 'hidden' || 'visible'
					socketService.userChangedState(state);
				});

				socketService.userChangedState('visible');

				var service = {
					states: {}
				};

				socketService.onVisibilityStatesChanged(function (states) {
					service.states = states;
				});
				return service;
            }
        ]);
})();

(function () {

	const app = angular.module('filesync.chat')
		.controller('chatController', ['$scope', function ($scope) {
            // Maybe use angular-scroll for new messages scroll down and goto messages, pinned etc
			let vm = this;



		}])
})();

(function () {
	const app = angular.module('filesync.chat');

	app.directive('fsChat', function () {
		return {
			restrict: 'AE',
			templateUrl: '/app/chat/chat.part.html'
		}
	});
})();

(function () {

	const app = angular.module('filesync.history');

	app.controller('historyController', ['historyService', 'visibilityService',
        function (historyService, visibilityService) {
			this.edits = historyService.edits;
			this.visibility = visibilityService;

			this.remove = function (edit) {
				historyService.remove(edit);
			};
  }
]);
})();

(function () {

	const app = angular.module('filesync.history');

	app.factory('historyService', function (socketService, _) {
		var edits = [];

		socketService.onFileChanged(function (filename, timestamp, content) {
			edits.unshift({
				filename: filename,
				timestamp: timestamp,
				content: content
			});
		});

		return {
			edits: edits,
			remove: function (edit) {
				_.remove(edits, edit);
			}
		};
	});
})();

(function () {

	const app = angular.module('filesync.chat.input')
		.controller('inputController', ['$scope', 'socketService', function ($scope, socketService) {
            // Maybe use angular-scroll for new messages scroll down and goto messages, pinned etc
			let vm = this;
			var bannedWord = ["", "*", " "];

			function addBannedWord(word) {
				vm.bannedWord.push(word);
			}

			function isMsgOk(msg) {
				return bannedWord.filter((word) => word === msg)
					.length === 0;
			}

			function isMsgToBot(msg) {
				return msg.search('!bot') == 0;
			}

			function newMsgToBot(msg) {
				var command = msg.split(' ');
				console.log(command);
				switch(command[1]) {
				case 'roulette':
					socketService.botRoulette();
					break;
				case 'infoCours':
					socketService.botInfoCours();
					break;
				case 'updateInfo':
					command.shift();
					command.shift();
					socketService.botUpdateInfo(command.join(' '));
					break;
				case 'command':
					socketService.botCommand();
					break;
				}
			}

			vm.sendMessage = function () {
				var msg = vm.message;
				if(isMsgToBot(msg)) {
					newMsgToBot(msg);
				} else if(isMsgOk(msg)) {
					socketService.sendMessage(moment()
						.format('h:mm'), msg);
					vm.message = '';
				} else {
					console.log('Mot interdit !' + bannedWord);
				}
			}
		}])
})();

(function () {
	const app = angular.module('filesync.chat.input');

	app.directive('fsInput', function () {
		return {
			restrict: 'AE',
			templateUrl: '/app/chat/input/input.part.html',
			// link: function() {
			//
			// }
		}
	});
})();

(function () {
	const app = angular.module('filesync.chat.messages')
		.controller('messagesController', ['$scope', 'socketService', function ($scope, socketService) {
            // Maybe use angular-scroll for new messages scroll down and goto messages, pinned etc
			let vm = this;
			vm.messages = [];
			vm.message = '';
			function onMessagesUpdated(messages) {
				vm.messages = messages;
				$scope.$apply();
			}
			socketService.onMessagesUpdated(onMessagesUpdated.bind(vm));

		}])
})();

(function () {
	const app = angular.module('filesync.chat.messages');

	app.directive('fsMessages', function () {
		return {
			restrict: 'AE',
			templateUrl: '/app/chat/messages/messages.part.html',
			controller: "messagesController",
			controllerAs: "mC",
			link: function ($scope, element) {
				let raw = element[0].children[0];
				$scope.$watch('mC.messages', function (newValue, oldValue) {
					raw.scrollTop = raw.scrollHeight;
				})
			}
		}
	});
})();

(function () {


	const app = angular.module('filesync.chat.socket')
		.factory('socketService', ['io', '_', '$timeout', function (io, _, $timeout) {
			var socket = io();
			var _onFileChanged = _.noop;
			var _onVisibilityStatesChanged = _.noop;

			socket.on('connect', function () {
				console.log('connected');
				var login = prompt('Nickname?');
				if(login == null) {
					login = "";
				}
				socket.emit('viewer:new', login);
			});

			socket.on('file:changed', function (filename, timestamp, content) {
				$timeout(function () {
					_onFileChanged(filename, timestamp, content);
				});
			});

			socket.on('viewer-err:name', function (nickname) {
				console.log("Erreur sur le nom " + nickname + ".");
				var login = prompt("Erreur sur le nom " + nickname + ".\nNew nickname?");
				if(login == null) {
					login = "";
				}
				socket.emit('viewer:new', login);
			});

			socket.on('users:visibility-states', function (states) {
				$timeout(function () {
					_onVisibilityStatesChanged(states);
				});
			});

			socket.on('error:auth', function (err) {
				// @todo yeurk
				alert(err);
			});

			return {
				onViewersUpdated: function (f) {
					socket.on('viewers:updated', f);
				},

				sendMessage: function (time, message) {
					socket.emit('message:new', time, message);
				},

				updateColor: function (color) {
					socket.emit('color:update', color)
				},

				onMessagesUpdated: function (f) {
					socket.on('messages:updated', f);
				},

				botRoulette: function () {
					socket.emit('bot:roulette');
				},

				botInfoCours: function () {
					socket.emit('bot:info');
				},

				botUpdateInfo: function (newInfo) {
					socket.emit('bot:updateInfo', newInfo);
				},

				botCommand: function () {
					socket.emit('bot:command');
				},

				onFileChanged: function (f) {
					_onFileChanged = f;
				},

				onVisibilityStatesChanged: function (f) {
					_onVisibilityStatesChanged = f;
				},

				userChangedState: function (state) {
					socket.emit('user-visibility:changed', state);
				}
			};
  }]);
})();

(function () {

	const app = angular.module('filesync.chat')
		.controller('viewersController', ['$scope', 'socketService', function ($scope, socketService) {
            // Maybe use angular-scroll for new messages scroll down and goto messages, pinned etc
			let vm = this;
			vm.viewers = [];

			$scope.nick = "Malo";

			function onViewersUpdated(viewers) {
				vm.viewers = viewers;
				$scope.$apply();
			}
			socketService.onViewersUpdated(onViewersUpdated.bind(vm));

			function showColor(color) {
				console.log(color);
			}

			vm.updateColor = function () {
				socketService.updateColor(vm.color);
			}
		}])
})();

(function () {
	const app = angular.module('filesync.chat.viewers');

	app.directive('fsViewers', function () {
		return {
			restrict: 'AE',
			templateUrl: '/app/chat/viewers/viewers.part.html',
			controller: "viewersController",
			controllerAs: "vC"
		}
	});
})();

//# sourceMappingURL=data:application/json;base64,
